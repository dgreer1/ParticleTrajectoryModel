function p = updateParticles(p,dx,dy,settings)

% updateParticles
% -------------
%
% update particle position
% check for land and grid boundary
% returns p structure

dlon = m2lon(dx,p.lat);
dlat = m2lat(dy,p.lat);

lon_new = p.lon + dlon;
lat_new = p.lat + dlat;


% Greenwich meridian
lon_new = mod(lon_new,360);

% North Pole
lat_new(lat_new>90)=90;

% Check for coastlines 
id = getIndex(lon_new,settings.grid.lon) ;
jd = getIndex(lat_new,settings.grid.lat) ;

land=zeros(p.np,1);
for k=1:np
    land = settings.grid.land(id(k),jd(k));
end

[lon_new, lat_new] = treatShoreline(p, settings, dlon, dlat, id, jd,...
                                        lon_new, lat_new, land);
    
    id_ = getIndex(p.lon(land==1),settings.grid.lon) ;
    jd_ = getIndex(p.lat(land==1),settings.grid.lat) ;

    ids = mod(id - sign(dlon(land==1)) -1 ,length(settings.grid.lon))+1 ;
    jds = mod(jd - sign(dlat(land==1)) -1 ,length(settings.grid.lat))+1 ;

for k=1:length(id_)

    land_x = settings.grid.land(id(k),jd_(k));
    land_y = settings.grid.land(id_(k),jd(k));
    land_xs = settings.grid.land(id(k),jds(k));
    land_ys = settings.grid.land(ids(k),jd(k));

    if land %if near coastline
        
        % longitude tansport dominant
        if dlon(k)>=dlat(k) && ~land_x % advect in lon only
            lat_new(k) = p.lat(k); 
        elseif dlon(k)>=dlat(k) && ~land_y % advect in lat only
            lon_new(k) = p.lon(k);
        
        % latitude transport dominant
        elseif dlat(k)>dlon(k) && ~land_y % advect in lat only
            lon_new(k) = p.lon(k);
        elseif dlat(k)>dlon(k) && ~land_x % advect in lon only
            lat_new(k) = p.lat(k);
        
        % if still stuck force one cell up
        elseif dlon(k)>=dlat(k) && ~land_xs %shift lat by one cell
            lat_new(k) = settings.grid.lat(jds(k));
        elseif dlat(k)>dlon(k) && ~land_ys  %shift lon by 1 cell
            lon_new(k) = settings.grid.lon(ids(k));
        
        % if still stuck don't update
        else
            lon_new(k) = p.lon(k);
            lat_new(k) = p.lat(k);
        end    
    end

end
            


% Check for release dates- dont update unreleased particles
lat_new(p.releaseDate > settings.date) = p.lat(p.releaseDate > settings.date);
lon_new(p.releaseDate > settings.date) = p.lon(p.releaseDate > settings.date);

% returns
p.lon = lon_new;
p.lat = lat_new;